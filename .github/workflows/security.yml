name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Rust security audit
  rust-security-audit:
    name: Rust Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run cargo audit
      run: |
        cargo audit --json > audit-results.json || true
        cargo audit
        
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rust-audit-results
        path: audit-results.json

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/setup@master
      
    - name: Snyk monitor (Rust)
      run: snyk monitor --file=Cargo.toml --package-manager=cargo
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true
      
    - name: Snyk test (Rust)
      run: snyk test --file=Cargo.toml --package-manager=cargo --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

  # SAST (Static Application Security Testing)
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: 'rust'
        queries: security-extended
        
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-sast-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build project for CodeQL
      run: |
        cargo build --release
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:rust"

  # Semgrep security scanning
  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/rust
          p/docker
          p/secrets
        generateSarif: "1"
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run GitGuardian scan
      uses: GitGuardian/ggshield-action@v1.25.0
      with:
        args: secret scan path .
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      continue-on-error: true
      
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Docker image security scanning
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t aerugo-security-scan:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'aerugo-security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Docker Scout
      uses: docker/scout-action@v1
      with:
        command: cves
        image: aerugo-security-scan:latest
        sarif-file: scout-results.sarif
        summary: true
        
    - name: Upload Docker Scout results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'scout-results.sarif'

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install cargo-license
      run: cargo install cargo-license
      
    - name: Check license compliance
      run: |
        echo "üìã Checking license compliance..."
        cargo license --json > licenses.json
        
        # Check for problematic licenses
        if cargo license | grep -E "(GPL|AGPL|LGPL)" && [ "$?" -eq 0 ]; then
          echo "‚ö†Ô∏è  Warning: Found copyleft licenses that may require attention"
          cargo license | grep -E "(GPL|AGPL|LGPL)"
        fi
        
        # Generate license report
        echo "## License Report" > license-report.md
        echo "Generated on: $(date)" >> license-report.md
        echo "" >> license-report.md
        cargo license >> license-report.md
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          licenses.json
          license-report.md

  # Configuration security check
  config-security:
    name: Configuration Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Docker security
      run: |
        echo "üê≥ Checking Dockerfile security..."
        
        # Check for running as root
        if grep -q "USER root" Dockerfile; then
          echo "‚ö†Ô∏è  Warning: Dockerfile runs as root user"
        fi
        
        # Check for hardcoded secrets
        if grep -E "(password|secret|key|token)" Dockerfile; then
          echo "‚ö†Ô∏è  Warning: Potential hardcoded credentials in Dockerfile"
        fi
        
        # Check for latest tag usage
        if grep -q ":latest" Dockerfile; then
          echo "‚ö†Ô∏è  Warning: Using 'latest' tag in Dockerfile"
        fi
        
    - name: Check Rust security configurations
      run: |
        echo "ü¶Ä Checking Rust security configurations..."
        
        # Check Cargo.toml for security features
        if ! grep -q 'default-features = false' Cargo.toml; then
          echo "‚ÑπÔ∏è  Info: Consider disabling default features for security"
        fi
        
        # Check for unsafe code usage
        if grep -r "unsafe " src/; then
          echo "‚ö†Ô∏è  Warning: Found unsafe code usage"
          grep -r "unsafe " src/ || true
        fi
        
    - name: Check environment configurations
      run: |
        echo "‚öôÔ∏è  Checking environment configurations..."
        
        # Check for development settings in production configs
        if find . -name "*.env*" -o -name "*.yml" -o -name "*.yaml" | xargs grep -l "debug.*true" 2>/dev/null; then
          echo "‚ö†Ô∏è  Warning: Debug mode might be enabled"
        fi
        
        # Check for default passwords or keys
        if find . -type f \( -name "*.env*" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) -exec grep -l "admin\|password\|secret\|key" {} \; 2>/dev/null; then
          echo "‚ÑπÔ∏è  Info: Configuration files contain credential-related keys (review for hardcoded values)"
        fi

  # Security policy enforcement
  policy-check:
    name: Security Policy Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check security policy compliance
      run: |
        echo "üìã Checking security policy compliance..."
        
        # Check for required security files
        files=("SECURITY.md" "CODE_OF_CONDUCT.md" ".github/SECURITY.md")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ Found: $file"
          else
            echo "‚ö†Ô∏è  Missing: $file"
          fi
        done
        
        # Check for security headers in code
        if grep -r "Content-Security-Policy\|X-Frame-Options\|X-Content-Type-Options" src/; then
          echo "‚úÖ Found security headers implementation"
        else
          echo "‚ÑπÔ∏è  Info: Consider implementing security headers"
        fi
        
        # Check for HTTPS enforcement
        if grep -r "https://" src/ && ! grep -r "http://" src/; then
          echo "‚úÖ HTTPS enforcement detected"
        else
          echo "‚ÑπÔ∏è  Info: Verify HTTPS enforcement in production"
        fi

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [rust-security-audit, dependency-scan, sast-analysis, semgrep-scan, secret-scan, docker-security-scan, license-scan, config-security, policy-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-artifacts
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "Commit: ${{ github.sha }}" >> security-summary.md
        echo "Branch: ${{ github.ref_name }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Add job results
        echo "## Job Results" >> security-summary.md
        echo "- Rust Security Audit: ${{ needs.rust-security-audit.result }}" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- SAST Analysis: ${{ needs.sast-analysis.result }}" >> security-summary.md
        echo "- Semgrep Scan: ${{ needs.semgrep-scan.result }}" >> security-summary.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }}" >> security-summary.md
        echo "- License Scan: ${{ needs.license-scan.result }}" >> security-summary.md
        echo "- Config Security: ${{ needs.config-security.result }}" >> security-summary.md
        echo "- Policy Check: ${{ needs.policy-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Add recommendations
        echo "## Security Recommendations" >> security-summary.md
        echo "1. Review all HIGH and CRITICAL vulnerabilities" >> security-summary.md
        echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
        echo "3. Address any secret scanning findings" >> security-summary.md
        echo "4. Implement missing security policies" >> security-summary.md
        echo "5. Regular security audits and penetration testing" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üîí Security Scan Results\n\n${summary}`
          });

  # Security notifications
  security-notification:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: security-report
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Send security alert
      run: |
        echo "üö® Security scan failures detected!"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Workflow: ${{ github.workflow }}"
        
        # Here you would send notifications to:
        # - Slack security channel
        # - PagerDuty for critical issues
        # - Email to security team
        # - Discord webhook
        
        echo "üìß Security team notified"
