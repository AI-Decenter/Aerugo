version: '3.8'

# Full Architecture Demo according to README High-Level Architecture Diagram
# Includes: Load Balancer + Multiple Aerugo Nodes + PostgreSQL + Redis + MinIO

networks:
  aerugo-net:
    driver: bridge

services:
  # üìä 1. METADATA STORE (PostgreSQL)
  postgres:
    image: postgres:15
    container_name: aerugo-postgres
    environment:
      POSTGRES_DB: aerugo_dev
      POSTGRES_USER: aerugo
      POSTGRES_PASSWORD: development
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aerugo-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U aerugo -d aerugo_dev" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # üöÄ 2. CACHE LAYER (Redis) 
  redis:
    image: redis:7-alpine
    container_name: aerugo-redis
    ports:
      - "6380:6379" # Use port 6380 to avoid conflict
    networks:
      - aerugo-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # üíæ 3. S3-COMPATIBLE OBJECT STORAGE (MinIO)
  minio:
    image: minio/minio
    container_name: aerugo-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9000" # MinIO API
      - "9002:9001" # MinIO Console
    volumes:
      - minio_data:/data
    networks:
      - aerugo-net
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # üèóÔ∏è 4. MULTIPLE AERUGO NODES (Stateless, Scalable Services)
  aerugo-node-1:
    build:
      context: .
      dockerfile: Dockerfile.aerugo
    container_name: aerugo-node-1
    environment:
      LISTEN_ADDRESS: "0.0.0.0:8080"
      DATABASE_URL: "postgresql://aerugo:development@postgres:5432/aerugo_dev"
      REDIS_URL: "redis://redis:6379"
      S3_ENDPOINT: "http://minio:9000"
      S3_BUCKET: "aerugo-registry"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_REGION: "us-east-1"
      S3_USE_PATH_STYLE: "true"
      JWT_SECRET: "test-integration-secret-key-do-not-use-in-production"
      RUST_LOG: "debug"
    ports:
      - "8081:8080"
    volumes:
      - ./k8sConfig.yaml:/app/k8sConfig.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aerugo-net
    restart: unless-stopped

  aerugo-node-2:
    build:
      context: .
      dockerfile: Dockerfile.aerugo
    container_name: aerugo-node-2
    environment:
      LISTEN_ADDRESS: "0.0.0.0:8080"
      DATABASE_URL: "postgresql://aerugo:development@postgres:5432/aerugo_dev"
      REDIS_URL: "redis://redis:6379"
      S3_ENDPOINT: "http://minio:9000"
      S3_BUCKET: "aerugo-registry"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_REGION: "us-east-1"
      S3_USE_PATH_STYLE: "true"
      JWT_SECRET: "test-integration-secret-key-do-not-use-in-production"
      RUST_LOG: "debug"
    ports:
      - "8082:8080"
    volumes:
      - ./k8sConfig.yaml:/app/k8sConfig.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aerugo-net
    restart: unless-stopped

  aerugo-node-3:
    build:
      context: .
      dockerfile: Dockerfile.aerugo
    container_name: aerugo-node-3
    environment:
      LISTEN_ADDRESS: "0.0.0.0:8080"
      DATABASE_URL: "postgresql://aerugo:development@postgres:5432/aerugo_dev"
      REDIS_URL: "redis://redis:6379"
      S3_ENDPOINT: "http://minio:9000"
      S3_BUCKET: "aerugo-registry"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_REGION: "us-east-1"
      S3_USE_PATH_STYLE: "true"
      JWT_SECRET: "test-integration-secret-key-do-not-use-in-production"
      RUST_LOG: "debug"
    ports:
      - "8083:8080"
    volumes:
      - ./k8sConfig.yaml:/app/k8sConfig.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aerugo-net
    restart: unless-stopped

  # ‚öñÔ∏è 5. LOAD BALANCER (Nginx)
  load-balancer:
    image: nginx:alpine
    container_name: aerugo-load-balancer
    ports:
      - "8080:80" # Main entry point
    volumes:
      - ./nginx-lb.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - aerugo-node-1
      - aerugo-node-2
      - aerugo-node-3
    networks:
      - aerugo-net
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
